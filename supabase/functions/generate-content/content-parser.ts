
export function parseContent(content: string): any[] {
  console.log('üîç === PARSEANDO CONTENIDO PERPLEXITY ===');
  console.log('üìÑ Contenido recibido (primeros 200 chars):', content.substring(0, 200));
  
  try {
    // Limpiar el contenido: remover <think> tags y otros elementos no-JSON
    let cleanContent = content.trim();
    
    // Remover etiquetas <think>...</think> completamente
    cleanContent = cleanContent.replace(/<think>[\s\S]*?<\/think>/gi, '');
    
    // Remover otras etiquetas XML comunes
    cleanContent = cleanContent.replace(/<[^>]+>/g, '');
    
    // Remover texto antes del JSON
    const jsonStart = Math.max(cleanContent.indexOf('['), cleanContent.indexOf('{'));
    if (jsonStart > 0) {
      cleanContent = cleanContent.substring(jsonStart);
      console.log('üßπ Contenido limpiado, empezando desde posici√≥n:', jsonStart);
    }
    
    // Buscar el final del JSON
    let jsonEnd = -1;
    if (cleanContent.startsWith('[')) {
      jsonEnd = cleanContent.lastIndexOf(']');
    } else if (cleanContent.startsWith('{')) {
      // Para objetos √∫nicos, buscar el √∫ltimo }
      let braceCount = 0;
      for (let i = 0; i < cleanContent.length; i++) {
        if (cleanContent[i] === '{') braceCount++;
        if (cleanContent[i] === '}') {
          braceCount--;
          if (braceCount === 0) {
            jsonEnd = i;
            break;
          }
        }
      }
    }
    
    if (jsonEnd > 0 && jsonEnd < cleanContent.length - 1) {
      cleanContent = cleanContent.substring(0, jsonEnd + 1);
      console.log('üßπ Contenido cortado hasta posici√≥n:', jsonEnd + 1);
    }
    
    // Limpiar espacios y caracteres especiales
    cleanContent = cleanContent.trim();
    
    console.log('üìù Contenido final para parsear (primeros 200 chars):', cleanContent.substring(0, 200));
    
    // Intentar parsear JSON
    const parsed = JSON.parse(cleanContent);
    
    // Asegurar que devolvemos un array
    if (!Array.isArray(parsed)) {
      console.log('üì¶ Convertir objeto √∫nico a array');
      return [parsed];
    }
    
    console.log('‚úÖ JSON parseado exitosamente:', parsed.length, 'elementos');
    return parsed;
    
  } catch (error) {
    console.error('‚ùå Error parseando contenido:', error.message);
    console.error('üìÑ Contenido problem√°tico (primeros 500 chars):', content.substring(0, 500));
    
    // Intentar extracci√≥n con regex mejorado
    try {
      console.log('üîÑ Intentando extracci√≥n con regex mejorado...');
      
      // Buscar JSON m√°s espec√≠ficamente
      const jsonArrayMatch = content.match(/\[[^\]]*\{[^}]*\}[^\]]*\]/s);
      const jsonObjectMatch = content.match(/\{[^{}]*"[^"]*"[^{}]*\}/s);
      
      let extracted = null;
      
      if (jsonArrayMatch) {
        console.log('üì¶ Array JSON encontrado con regex');
        extracted = JSON.parse(jsonArrayMatch[0]);
      } else if (jsonObjectMatch) {
        console.log('üì¶ Objeto JSON encontrado con regex');
        extracted = JSON.parse(jsonObjectMatch[0]);
      }
      
      if (extracted) {
        console.log('‚úÖ JSON extra√≠do con regex exitosamente');
        return Array.isArray(extracted) ? extracted : [extracted];
      }
    } catch (regexError) {
      console.error('‚ùå Error con extracci√≥n regex mejorada:', regexError.message);
    }
    
    throw new Error('No se pudo parsear el contenido como JSON v√°lido: ' + error.message);
  }
}

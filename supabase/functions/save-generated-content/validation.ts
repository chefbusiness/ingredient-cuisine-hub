
// Input validation and sanitization functions
export function sanitizeText(input: any, maxLength: number = 255): string {
  if (typeof input !== 'string') return '';
  return input.trim().slice(0, maxLength);
}

export function validateIngredientData(ingredient: any): boolean {
  return ingredient.name && 
         ingredient.name_en && 
         ingredient.description && 
         ingredient.category &&
         typeof ingredient.name === 'string' &&
         typeof ingredient.name_en === 'string';
}

// ALGORITMO CORREGIDO: Normalizaci√≥n menos agresiva para modo manual
const normalizeForComparison = (text: string): string => {
  if (!text) return '';
  return text.toLowerCase()
    .trim()
    .replace(/\s+/g, ' ') // Normalizar espacios m√∫ltiples
    .replace(/[√°√†√§]/g, 'a')
    .replace(/[√©√®√´]/g, 'e') 
    .replace(/[√≠√¨√Ø]/g, 'i')
    .replace(/[√≥√≤√∂√¥]/g, 'o')
    .replace(/[√∫√π√º√ª]/g, 'u')
    .replace(/√±/g, 'n')
    .replace(/√ß/g, 'c');
};

// FUNCI√ìN PRINCIPAL: Modo manual vs autom√°tico con diferentes niveles de detecci√≥n
export const isDuplicate = (newIngredient: any, existingIngredients: any[], isManualMode: boolean = false): boolean => {
  console.log(`üîç === VERIFICACI√ìN DE DUPLICADO ${isManualMode ? 'MODO MANUAL' : 'MODO AUTOM√ÅTICO'} ===`);
  console.log(`üìã Verificando: "${newIngredient.name}"`);
  console.log(`üìä Contra ${existingIngredients.length} ingredientes existentes`);
  
  if (isManualMode) {
    console.log(`üéØ MODO MANUAL: Verificaci√≥n menos estricta para ingrediente solicitado espec√≠ficamente`);
    
    // En modo manual, solo rechazar si hay coincidencia EXACTA en el nombre principal (espa√±ol)
    const newNameNormalized = normalizeForComparison(newIngredient.name);
    
    const isDupe = existingIngredients.some(existing => {
      const existingNameNormalized = normalizeForComparison(existing.name);
      
      // SOLO comparaci√≥n exacta del nombre principal en espa√±ol
      const isExactSpanishMatch = existingNameNormalized === newNameNormalized;
      
      if (isExactSpanishMatch) {
        console.log(`‚ö†Ô∏è DUPLICADO EXACTO EN ESPA√ëOL: "${newIngredient.name}" === "${existing.name}"`);
        return true;
      }
      
      return false;
    });
    
    console.log(`‚úÖ Resultado MODO MANUAL: ${isDupe ? 'üö´ ES DUPLICADO EXACTO' : '‚úÖ PERMITIR CREACI√ìN'}`);
    return isDupe;
    
  } else {
    // Modo autom√°tico: verificaci√≥n m√°s estricta como antes
    console.log(`ü§ñ MODO AUTOM√ÅTICO: Verificaci√≥n estricta multi-idioma`);
    
    const newNames = [
      normalizeForComparison(newIngredient.name),
      normalizeForComparison(newIngredient.name_en),
      normalizeForComparison(newIngredient.name_fr),
      normalizeForComparison(newIngredient.name_it),
      normalizeForComparison(newIngredient.name_pt),
      normalizeForComparison(newIngredient.name_zh),
      normalizeForComparison(newIngredient.name_la)
    ].filter(Boolean);
    
    const isDupe = existingIngredients.some(existing => {
      const existingNames = [
        normalizeForComparison(existing.name),
        normalizeForComparison(existing.name_en),
        normalizeForComparison(existing.name_fr),
        normalizeForComparison(existing.name_it),
        normalizeForComparison(existing.name_pt),
        normalizeForComparison(existing.name_zh),
        normalizeForComparison(existing.name_la)
      ].filter(Boolean);
      
      const hasMatch = existingNames.some(existingName => {
        if (!existingName || existingName.length < 3) return false;
        
        return newNames.some(newName => {
          if (!newName || newName.length < 3) return false;
          
          const isExactMatch = existingName === newName;
          
          if (isExactMatch) {
            console.log(`‚ö†Ô∏è DUPLICADO EXACTO MULTI-IDIOMA: "${newName}" === "${existingName}"`);
            console.log(`üîç Ingrediente existente: "${existing.name}"`);
          }
          
          return isExactMatch;
        });
      });
      
      return hasMatch;
    });
    
    console.log(`‚úÖ Resultado MODO AUTOM√ÅTICO: ${isDupe ? 'üö´ ES DUPLICADO' : '‚úÖ NO ES DUPLICADO'}`);
    return isDupe;
  }
};

// FUNCI√ìN ESPEC√çFICA PARA MODO MANUAL: Solo verificar nombre espa√±ol exacto
export const isSpecificDuplicate = (requestedName: string, existingIngredients: any[]): boolean => {
  const normalizedRequested = normalizeForComparison(requestedName);
  console.log(`üéØ Verificaci√≥n espec√≠fica MODO MANUAL para: "${requestedName}" -> normalizado: "${normalizedRequested}"`);
  
  const isDupe = existingIngredients.some(existing => {
    const normalizedExisting = normalizeForComparison(existing.name);
    
    // SOLO comparaci√≥n exacta del nombre principal espa√±ol
    const isExactMatch = normalizedExisting === normalizedRequested;
    
    if (isExactMatch) {
      console.log(`‚ö†Ô∏è DUPLICADO EXACTO ESPA√ëOL ENCONTRADO: "${requestedName}" coincide exactamente con "${existing.name}"`);
    }
    
    return isExactMatch;
  });
  
  console.log(`‚úÖ Resultado verificaci√≥n espec√≠fica: ${isDupe ? 'ES DUPLICADO EXACTO' : 'PERMITIR CREACI√ìN'}`);
  return isDupe;
};
